# Newly updated for Varnish 4
vcl 4.0;

import std;
import directors;

backend default {
    # Set a host.
    .host = "127.0.0.1";
    # Set a port. 80 is normal Web traffic.
    .port = "<%= @apache_port %>";
}

# Whitelist to allow cache purge requests
acl purge_ok {
    "127.0.0.1";
    "localhost";
    "::1";
    <% @varnish_whitelist.each do |item| -%>
    "<%= item %>";
    <% end -%>
}

acl banned_ips {
    "5.61.38.11";
    <% @varnish_banned_ips.each do |item| -%>
    "<%= item %>";
    <% end -%>
}

# Which URL components are used to look up a match
# and return a cached page.
sub vcl_hash {
    # Build a typical hash
    hash_data(req.url);
    if (req.http.host) {
        hash_data(req.http.host);
    } else {
        hash_data(server.ip);
    }
    # Pass hash out
    return(lookup);
}

# Taken from: https://www.varnish-software.com/blog/grace-varnish-4-stale-while-revalidate-semantics-varnish
sub vcl_hit {
    if (obj.ttl >= 0s) {
        # normal hit
        return (deliver);
    }
    # We have no fresh fish. Lets look at the stale ones.
    if (std.healthy(req.backend_hint)) {
        # Backend is healthy. Limit age to 10s.
        if (obj.ttl + 10s > 0s) {
            set req.http.grace = "normal(limited)";
            return (deliver);
        } else {
        # No candidate for grace. Fetch a fresh object.
            return(fetch);
        }
    } else {
        # backend is sick - use full grace
        if (obj.ttl + obj.grace > 0s) {
            set req.http.grace = "full";
            return (deliver);
        } else {
            # no graced object.
            return (fetch);
        }
    }
    return (fetch);
}

sub vcl_recv {
    if (client.ip ~ banned_ips) {
        return(synth(403, "Forbidden."));
    }

    set req.backend_hint = default;
    set req.http.grace = "none";

    if (req.restarts == 0) {
        if (req.http.x-forwarded-for) {
            set req.http.X-Forwarded-For =
                req.http.X-Forwarded-For + ", " + client.ip;
        } else {
            set req.http.X-Forwarded-For = client.ip;
        }
    }

    # If it's not GET or HEAD let it go
    if (req.method != "GET" && req.method != "HEAD") {
        return (pass);
    }

    # Don't cache these pages
    if (req.url ~ "^/admin/" ||
        <% @varnish_no_cache_urls.each do |item| -%>
        req.url ~ "<%= item %>" ||
        <% end -%>
        req.url ~ "^/munin/" ||
        req.url ~ "^/server-status") {
        return(pass);
    }

    if (req.url ~ "\.(ico)$") {
        return(synth(750, "Moved Temporarily"));
    }

    # Allow purges
    if (req.method == "PURGE") {
        if (client.ip ~ purge_ok) {
            return(purge);
        } else {
            return(synth(403, "Access denied."));
        }
    }

    # Normalize the query arguments
    set req.url = std.querysort(req.url);
    return (hash);
}

sub vcl_deliver {
    set resp.http.grace = req.http.grace;
    if (obj.hits > 0) {
        set resp.http.X-Varnish-Cache = "HIT";
    }
    else {
        set resp.http.X-Varnish-Cache = "MISS";
    }
    return(deliver);
}

sub vcl_backend_response {
    # For grace mode. This is how long Varnish will keep objects in its cache
    # after their TTL has expired.
    set beresp.grace = 1h;

    # Get the response. Set the cache lifetime.
    set beresp.ttl = <%= @varnish_ttl %>;
    set beresp.http.X-Varnish-TTL = "<%= @varnish_ttl %>";

    unset beresp.http.Vary;
    return (deliver);
}
